name: A0 - PR in Review

# Based on https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions

env:
  GITHUB_TOKEN: ${{ secrets.TOKEN }}

on:
  pull_request:
    types:
      - assigned
      - review_requested

jobs:
  track_pr:
    runs-on: ubuntu-latest

    steps:
      - run: echo ::set-env name=TITLE::${GITHUB_REPOSITORY#*/}
      - name: Get project data
        env:
          ORGANIZATION: ${{ github.repository_owner }}
          PROJECT_TITLE: ${{ env.TITLE }}
        run: |
          gh api graphql -f query='
          query($org: String!, $title: String!) {
            organization(login: $org){
              projectV2(first: 1, query: $title) {
                nodes {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -F title=$PROJECT_TITLE > project_data.json
          
          # Parses the response from the API query and stores the relevant IDs as environment variables. Modify this to get the ID for different fields or options. For example:
          #
          # - To get the ID of a field called `Team`, add `echo 'TEAM_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") | .id' project_data.json) >> $GITHUB_ENV`.
          # - To get the ID of an option called `Octoteam` for the `Team` single select field, add `echo 'OCTOTEAM_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") |.options[] | select(.name=="Octoteam") |.id' project_data.json) >> $GITHUB_ENV`.
          # 
          # **Note:** This workflow assumes that you have a project with a single select field called "Status" that includes an option called "In Review" and a date field called "Date posted". You must modify this section to match the fields that are present in your table.
          echo ::set-env name=PROJECT_ID=$(jq '.data.organization.projectsV2.nodes[0].id' project_data.json)
          echo ::set-env name=DATE_FIELD_ID=$(jq '.data.organization.projectsV2.nodes[0].fields.nodes[] | select(.name== "Date posted") | .id' project_data.json)
          echo ::set-env name=STATUS_FIELD_ID=$(jq '.data.organization.projectsV2.nodes[0].fields.nodes[] | select(.name== "Status") | .id' project_data.json)
          echo ::set-env name=IN_REVIEW_OPTION_ID=$(jq '.data.organization.projectsV2.nodes[0].fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="In Review") |.id' project_data.json)

      - name: Add PR to project
        env:
          REPO_NAME: ${{ env.TITLE }}
          REPO_OWNER: ${{ github.repository_owner }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          number=$(
            gh api graphql -f query='
            query($url: URI!) {
              resource(url: $url) {
                ... on PullRequest {
                  body
                }
              }
            }' -f url=$PR_URL --jq '.data.resource.body' | grep -Poi '(?<=closes #)\d+'
          ) && item_id=$(
            gh api graphql -f query='
            query($number: Int!, $name: String!, $owner: RepositoryOwner!) {
              repository(name: $name, owner: $owner) {
                issue(number: $number) {
                  projectItems(first: 1) {
                    nodes {
                      id
                    }
                  }
                }
              }
            }' -F number=$number -f name=$REPO_NAME -f owner=$REPO_OWNER --jq '.data.repository.issue.projectItems.nodes[0].id'
          ) || true

          # Stores the ID of the created item as an environment variable.
          echo ::set-env name=ITEM_ID=$item_id

      - name: Set fields
        run: |
          test -z $ITEM_ID || gh api graphql -f query='
          mutation (
            $project: ID!
            $item: ID!
            $status_field: ID!
            $status_value: String!
          ) {
            set_status: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $status_field
              value: {
                singleSelectOptionId: $status_value
              }
            }) {
              projectV2Item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.IN_REVIEW_OPTION_ID }} --silent

