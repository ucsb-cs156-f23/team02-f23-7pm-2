name: A0 - PR in Review
env:
  GITHUB_TOKEN: ${{ github.token }}

on:
  pull_request:
    types:
      - assigned

jobs:
  track_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Get project data
        env:
          ORGANIZATION: ucsb-cs156-f23
          PROJECT_NUMBER: 23
        run: |
          gh api graphql -f query='
          query($org: String!, $number: Int!) {
           organization(login: $org){
             projectV2(number: $number) {
               id
               fields(first:20) {
                 nodes {
                   ... on ProjectV2Field {
                     id
                     name
                   }
                   ... on ProjectV2SingleSelectField {
                     id
                     name
                     options {
                       id
                       name
                     }
                   }
                 }
               }
             }
           }
          }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
          
          # Parses the response from the API query and stores the relevant IDs as environment variables. Modify this to get the ID for different fields or options. For example:
          #
          # - To get the ID of a field called `Team`, add `echo 'TEAM_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") | .id' project_data.json) >> $GITHUB_ENV`.
          # - To get the ID of an option called `Octoteam` for the `Team` single select field, add `echo 'OCTOTEAM_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") |.options[] | select(.name=="Octoteam") |.id' project_data.json) >> $GITHUB_ENV`.
          # 
          # **Note:** This workflow assumes that you have a project with a single select field called "Status" that includes an option called "In Review" and a date field called "Date posted". You must modify this section to match the fields that are present in your table.
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'IN_REVIEW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="In Review") |.id' project_data.json) >> $GITHUB_ENV

      - name: Add PR to project
        env:
          PR_ID: ${{ github.event.pull_request.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
          mutation($project:ID!, $pr:ID!) {
           addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {
             item {
               id
             }
           }
          }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectV2ItemById.item.id')"
          
          # Stores the ID of the created item as an environment variable.
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Get date
        run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Set fields
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $date_field: ID!
              $date_value: Date!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
              set_date_posted: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $date_field
                value: {
                  date: $date_value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.IN_REVIEW_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent

